from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import vtkmodules.vtkCommonCore
import vtkmodules.vtkCommonExecutionModel

class vtkFDSReader(vtkmodules.vtkCommonExecutionModel.vtkPartitionedDataSetCollectionAlgorithm):
    assembly:'getset_descriptor'
    assembly_tag:'getset_descriptor'
    file_name:'getset_descriptor'
    stream:'getset_descriptor'
    time_tolerance:'getset_descriptor'
    def __init__(self, **properties:Any) -> None: ...
    def AddSelector(self, selector:str) -> bool: ...
    def ClearSelectors(self) -> None: ...
    def GetAssembly(self) -> 'vtkDataAssembly': ...
    def GetAssemblyTag(self) -> int: ...
    def GetFileName(self) -> str: ...
    def GetNumberOfGenerationsFromBase(self, type:str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type:str) -> int: ...
    def GetStream(self) -> 'vtkResourceStream': ...
    def GetTimeTolerance(self) -> float: ...
    def IsA(self, type:str) -> int: ...
    @staticmethod
    def IsTypeOf(type:str) -> int: ...
    def NewInstance(self) -> 'vtkFDSReader': ...
    @staticmethod
    def SafeDownCast(o:'vtkObjectBase') -> 'vtkFDSReader': ...
    def SetFileName(self, _arg:str) -> None: ...
    def SetStream(self, stream:'vtkResourceStream') -> None: ...
    def SetTimeTolerance(self, _arg:float) -> None: ...

