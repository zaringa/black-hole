from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import vtkmodules.vtkCommonCore
import vtkmodules.vtkCommonExecutionModel

class vtkPythonAlgorithm(vtkmodules.vtkCommonExecutionModel.vtkAlgorithm):
    number_of_input_ports:'getset_descriptor'
    number_of_output_ports:'getset_descriptor'
    python_object:'getset_descriptor'
    def __init__(self, **properties:Any) -> None: ...
    def GetNumberOfGenerationsFromBase(self, type:str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type:str) -> int: ...
    def IsA(self, type:str) -> int: ...
    @staticmethod
    def IsTypeOf(type:str) -> int: ...
    def NewInstance(self) -> 'vtkPythonAlgorithm': ...
    @staticmethod
    def SafeDownCast(o:'vtkObjectBase') -> 'vtkPythonAlgorithm': ...
    def SetNumberOfInputPorts(self, n:int) -> None: ...
    def SetNumberOfOutputPorts(self, n:int) -> None: ...
    def SetPythonObject(self, obj:'PyObject') -> None: ...

