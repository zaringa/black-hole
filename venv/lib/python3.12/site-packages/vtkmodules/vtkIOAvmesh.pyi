from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import vtkmodules.vtkCommonCore
import vtkmodules.vtkCommonExecutionModel

class vtkAvmeshReader(vtkmodules.vtkCommonExecutionModel.vtkPartitionedDataSetCollectionAlgorithm):
    build_connectivity_iteratively:'getset_descriptor'
    file_name:'getset_descriptor'
    surface_only:'getset_descriptor'
    def __init__(self, **properties:Any) -> None: ...
    def BuildConnectivityIterativelyOff(self) -> None: ...
    def BuildConnectivityIterativelyOn(self) -> None: ...
    def CanReadFile(self, filename:str) -> int: ...
    def GetBuildConnectivityIteratively(self) -> bool: ...
    def GetFileName(self) -> str: ...
    def GetNumberOfGenerationsFromBase(self, type:str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type:str) -> int: ...
    def GetSurfaceOnly(self) -> bool: ...
    def IsA(self, type:str) -> int: ...
    @staticmethod
    def IsTypeOf(type:str) -> int: ...
    def NewInstance(self) -> 'vtkAvmeshReader': ...
    @staticmethod
    def SafeDownCast(o:'vtkObjectBase') -> 'vtkAvmeshReader': ...
    def SetBuildConnectivityIteratively(self, _arg:bool) -> None: ...
    def SetFileName(self, arg:str) -> None: ...
    def SetSurfaceOnly(self, _arg:bool) -> None: ...
    def SurfaceOnlyOff(self) -> None: ...
    def SurfaceOnlyOn(self) -> None: ...

